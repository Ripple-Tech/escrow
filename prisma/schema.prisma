// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

// Auth Models

model Account {
  id                 String   @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String               @id @default(uuid())
  email              String?              @unique
  emailVerified      DateTime?
  verifiedUser       DateTime?
  name               String?
  image              String?
  password           String?
  role               UserRole             @default(USER)
  apiKey             String               @unique @default(cuid())
  isGuest            Boolean              @default(false)
  isTwoFactorEnabled Boolean              @default(false)
  balance            Int                  @default(0)

  buyerLockedFunds  LockedFund[] 
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  // Auth and security relations
  accounts           Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  transactions       Transaction[]

  // Escrow relations
  createdEscrows     Escrow[]             @relation("CreatorEscrows")
  buyerEscrows       Escrow[]             @relation("BuyerEscrows")
  sellerEscrows      Escrow[]             @relation("SellerEscrows")
  sentEscrows        Escrow[]             @relation("SentEscrows")

  receivedEscrows    Escrow[]             @relation("ReceivedEscrows")

  // Opposite relation for Escrow.user
  escrows            Escrow[]             @relation("UserEscrows")

  // Opposite relation for EscrowActivity.user
  escrowActivities   EscrowActivity[]

  // New index for improved query performance
  @@index([email, apiKey])
}

// Security and password management models
model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}



enum EscrowStatus {
  PENDING
  RELEASED
  CANCELLED
}

enum EscrowRole {
  SELLER
  BUYER
}

enum EscrowSource {
  INTERNAL
  API
}

enum EscrowInvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum LogisticsOption {
  NO
  PICKUP
  DELIVERY
}

enum Currency {
  NGN
  USD
  GHS
}

model Escrow {
  id            String       @id @default(cuid())
  productName   String
  description   String?
  amount        Decimal
  currency      Currency
  status        EscrowStatus @default(PENDING)
  role          EscrowRole
  lockedfund   LockedFund?
  // Sender is required
  sender        User         @relation("SentEscrows", fields: [senderId], references: [id])
  senderId      String
  senderEmail   String?
  // Receiver is optional until connected
  receiver      User?        @relation("ReceivedEscrows", fields: [receiverId], references: [id])
  receiverId    String?
  receiverEmail String?

  // Buyer relation (opposite of buyerEscrows)
  buyer         User?        @relation("BuyerEscrows", fields: [buyerId], references: [id])
  buyerId       String?

  // Seller relation (opposite of sellerEscrows)
  seller        User?        @relation("SellerEscrows", fields: [sellerId], references: [id])
  sellerId      String?

  // Creator relation
  creator       User         @relation("CreatorEscrows", fields: [creatorId], references: [id])
  creatorId     String

  // Opposite relation for User.escrows
  user         User?        @relation("UserEscrows", fields: [userId], references: [id])
  userId       String?

  // New features from reference model
  source            EscrowSource           @default(INTERNAL)
  invitationStatus  EscrowInvitationStatus @default(PENDING)
  invitedRole       EscrowRole?
 
  logistics     LogisticsOption @default(NO)
  photoUrl      String?
  color         String?
  category      String?
  quantity      Int?

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Opposite relation for EscrowActivity.escrow
  activities    EscrowActivity[]
}

// Transaction Models
enum TransactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  type      TransactionType
  status    TransactionStatus @default(PENDING)
  reference String            @unique
  amount    Float
  currency  Currency

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EscrowActivity {
  id        String   @id @default(uuid())
  escrowId  String
  userId    String
  action    String   // e.g. CREATED, ACCEPTED, RELEASED
  createdAt DateTime @default(now())

  escrow    Escrow   @relation(fields: [escrowId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model LockedFund {
  id        String   @id @default(cuid())
  escrowId  String   @unique
  buyerId   String
  amount    Decimal
  createdAt DateTime @default(now())
  released  Boolean  @default(false)

  // Relations
  escrow Escrow @relation(fields: [escrowId], references: [id])
  buyer  User   @relation(fields: [buyerId], references: [id])
}


 
