"use client"

import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query"
import { useSearchParams, useRouter } from "next/navigation"
import { useEffect, useMemo, useState } from "react"
import { client } from "@/lib/client"
import { Card } from "@/components/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Heading } from "@/components/heading"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { ArrowUpDown, BarChart } from "lucide-react"
import { Escrow } from "@prisma/client"
import { IoCopyOutline } from "react-icons/io5"
import { useUser } from "@clerk/nextjs"
import { FaInfoCircle } from "react-icons/fa"
import { MdHistory, MdChat } from "react-icons/md"

interface EscrowDetailContentProps {
  escrow: Escrow
  isCreator: boolean
}

export const EscrowDetailContent = ({ escrow, isCreator }: EscrowDetailContentProps) => {
    const shareUrl = `${process.env.NEXT_PUBLIC_APP_URL}/dashboard/escrow/${escrow.id}`
    const { user } = useUser()
    
    const [copied, setCopied] = useState(false)
  const handleCopy = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error("Copy failed", err)
      alert("Failed to copy link.")
    }
  }
  const searchParams = useSearchParams()
  const router = useRouter()
  const qc = useQueryClient()
  const [activeTab, setActiveTab] = useState<"overview" | "activity">("overview")

  // fetch escrow details (polling)
  const { data, isFetching } = useQuery({
    queryKey: ["escrow", escrow.id],
    queryFn: async () => {
      const res = await client.escrow.getEscrowById.$get({ id: escrow.id })
      return await res.json()
    },
    initialData: { escrow },
    refetchOnWindowFocus: false,
  })

 const acceptMutation = useMutation({
    mutationFn: async () => {
      const res = await client.escrow.acceptEscrow.$post({ escrowId: escrow.id })
      return await res.json()
    },
    onSuccess: async () => {
      await qc.invalidateQueries({ queryKey: ["escrow", escrow.id] })
    },
  })


  if (!data?.escrow) {
    return <p>Escrow not found.</p>
  }
  const e = data.escrow

  const tabs = [
  { value: "overview", label: "Overview", icon: <FaInfoCircle size={16} /> },
  { value: "activity", label: "Activity", icon: <MdHistory size={16} /> },
  { value: "chat", label: "Chat", icon: <MdChat size={16} /> },
]

  return (
    <div className="space-y-6">
      <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as any)}>
          
    <TabsList className="mb-2 w-full flex">
      {tabs.map(({ value, label, icon }) => (
        <TabsTrigger
          key={value}
          value={value}
          className="flex-1 flex items-center justify-center gap-2"
        >
          {icon} {label}
        </TabsTrigger>
      ))}
    </TabsList>

     {/* Accept invitation button â†’ only for non-creator if not accepted yet */}
            {!isCreator && !e.receiverId && (
              <div className="mt-6">
                <Button
                  onClick={() => acceptMutation.mutate()}
                  disabled={acceptMutation.isPending}
                  className="w-full"
                >
                  {acceptMutation.isPending ? "Acceptingâ€¦" : "Accept Invitation"}
                </Button>
              </div>
            )}

        {/* Overview Tab */}
        <TabsContent value="overview">
          <Card className="p-6">
            <h2 className="text-2xl font-bold mb-4">{e.productName}</h2>
            <p className="text-muted-foreground mb-2">{e.description}</p>

            <div className="space-y-2">
              <p><strong>Amount:</strong> {e.amount.toString()} {e.currency}</p>
              <p><strong>Status:</strong> {e.status}</p>
              <p><strong>Role:</strong> {e.role}</p>
              {e.receiverEmail && (
          <p><strong>Receiver Email:</strong> {e.receiverEmail}</p>
        )}

          {/* ðŸ”’ Sharable link â€” show only if creator */}
          {/* {isCreator && ( */}
            <div className="flex items-center gap-2">
              <span className="font-medium">Sharable Link:</span>
              <a
                href={shareUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 underline text-sm truncate max-w-[60%]"
              >
                {shareUrl}
              </a>
              <button
                className="flex items-center gap-1 px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300"
                onClick={() => handleCopy(shareUrl)}
              >
                <IoCopyOutline size={18} />
                {copied ? <span className="text-green-600">Copied!</span> : null}
              </button>
            </div>
          {/* )} */}
      
         </div>

             

          </Card>
        </TabsContent>

        {/* Activity Tab (placeholder for now) */}
        <TabsContent value="activity">
          <Card className="p-6">
            <Heading className="text-xl mb-4">Escrow Activity</Heading>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Date</TableHead>
                  <TableHead>Action</TableHead>
                  <TableHead>By</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                <TableRow>
                  <TableCell>{new Date(e.createdAt).toLocaleString()}</TableCell>
                  <TableCell>Created</TableCell>
                  <TableCell>{e.senderId}</TableCell>
                </TableRow>
              </TableBody>
            </Table>
          </Card>
        </TabsContent>
      </Tabs>

       

        

      <div className="flex justify-end">
        <Button variant="destructive" onClick={() => router.push("/dashboard/escrow")}>
          Delete Escrow
        </Button>
      </div>
    </div>
  )
}  
